/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frm;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.apache.hadoop.hbase.filter.BinaryComparator;
import org.apache.hadoop.hbase.filter.ColumnPrefixFilter;
import org.apache.hadoop.hbase.filter.CompareFilter;
import org.apache.hadoop.hbase.filter.Filter;
import org.apache.hadoop.hbase.filter.PrefixFilter;
import org.apache.hadoop.hbase.filter.RowFilter;
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;
import org.apache.hadoop.hbase.util.Bytes;
import utilities.hbaseDB;

/**
 *
 * @author andresbenitez
 */
public class hbaseAccess extends javax.swing.JFrame {

    /**
     * Creates new form hbaseAccess
     */
    public hbaseAccess() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("execute Query");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Total:");

        lblTotal.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        hbaseDB hbConn = new hbaseDB("/Users/andresbenitez/Documents/app/ABTViewer3/srvConf.properties","HBConf2");
        
        /*
            Procedimiento para Ejecutar Consultas y Retornar ResultSet de Datos
            Crear Lista para Filtros
        */
        
        List<Filter> filters = new ArrayList<>();

        //Definir los Filtros que se desean
        //
        //Para Agregar Filtro por Prefijos
        
        byte[] prefix = Bytes.toBytes("C000022015092309353501");
        Filter filter1 = new PrefixFilter(prefix);

        Filter filter2 = new RowFilter(CompareFilter.CompareOp.GREATER_OR_EQUAL,new BinaryComparator(Bytes.toBytes("C000022015092309353501")));
        Filter filter3 = new ColumnPrefixFilter((Bytes.toBytes("time")));
        
        SingleColumnValueFilter colValFilterANI = new SingleColumnValueFilter(Bytes.toBytes("grab"), Bytes.toBytes("ani")
                , CompareFilter.CompareOp.EQUAL, new BinaryComparator(Bytes.toBytes("962415670")));

        SingleColumnValueFilter colValFilterDIA = new SingleColumnValueFilter(Bytes.toBytes("time"), Bytes.toBytes("dia")
                , CompareFilter.CompareOp.EQUAL, new BinaryComparator(Bytes.toBytes("01")));
        
        SingleColumnValueFilter colValFilterDNIS = new SingleColumnValueFilter(Bytes.toBytes("grab"), Bytes.toBytes("dnis")
                , CompareFilter.CompareOp.EQUAL, new BinaryComparator(Bytes.toBytes("008885120")));
        
        SingleColumnValueFilter colValFilterLABEL = new SingleColumnValueFilter(Bytes.toBytes("label"), Bytes.toBytes("color")
                , CompareFilter.CompareOp.EQUAL, new BinaryComparator(Bytes.toBytes("ROJO")));        
        
        
        colValFilterLABEL.setFilterIfMissing(true); //Si la columna no existe para una fila entonces no la muestra
        colValFilterLABEL.filterRow();
        colValFilterLABEL.getLatestVersionOnly();        
        
        colValFilterDNIS.setFilterIfMissing(true); //Si la columna no existe para una fila entonces no la muestra
        colValFilterDNIS.filterRow();
        colValFilterDNIS.getLatestVersionOnly();        
        
        
        //Se agrupan los filtros
        //filters.add(filter1);
        //filters.add(filter2);
        //filters.add(filter2);
        //filters.add(colValFilterANI);
        //filters.add(colValFilterDIA);
        filters.add(colValFilterDNIS);

        //Start and Stop ROW
        String inicio   = "C00002201603011400";
        String fin      = "C00002201603011459";
        
        
        //Se crea la matriz de columnas a devolver
        List<String> qualifiers = new ArrayList<>();

        //Agrega las Columnas y Qualifiers
        qualifiers.add("grab:ani");
        qualifiers.add("grab:dnis");
        qualifiers.add("grab:name");
        qualifiers.add("grab:scid");
        qualifiers.add("grab:size");
        qualifiers.add("grab:type");
        qualifiers.add("grab:url");
        qualifiers.add("time:ano");
        qualifiers.add("time:dia");
        qualifiers.add("time:fgrab");
        qualifiers.add("time:hora");
        qualifiers.add("time:mes");
        qualifiers.add("time:min");
        qualifiers.add("time:seg");
        qualifiers.add("time:semana");
        qualifiers.add("user:name");
        qualifiers.add("cli:name");

        //Se ejecuta el Metodo connHB.getRsQuery
        //
        
        //Si los filtros no son definidos la consulta no restorna datos
        //no hay que referenciar filtros si es que no se utilizaran
        
        //DefaultTableModel dtmData = hbConn.getRsQuery("hgrab", qualifiers, inicio, fin, filters);
        DefaultTableModel dtmData = hbConn.getRsQuery("hgrab", qualifiers, inicio, fin);
        //DefaultTableModel dtmData = hbConn.getRsQuery("hgrab", qualifiers, filters);
        
        lblTotal.setText(String.valueOf(dtmData.getRowCount()));

        this.jTable1.setModel(dtmData);
        
        if (dtmData.getRowCount()!=0) {
            for (int rows=0; rows<dtmData.getRowCount(); rows++) {
                for (int cols=0; cols<dtmData.getColumnCount(); cols++) {
                    System.out.println(dtmData.getValueAt(rows, cols));
                    
                }   
            }
        }
               
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hbaseAccess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hbaseAccess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hbaseAccess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hbaseAccess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hbaseAccess().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblTotal;
    // End of variables declaration//GEN-END:variables
}
